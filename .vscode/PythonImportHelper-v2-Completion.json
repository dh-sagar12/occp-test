[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "exists",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.config.database",
        "description": "src.config.database",
        "isExtraImport": true,
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "src.config.database",
        "description": "src.config.database",
        "isExtraImport": true,
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.config.database",
        "description": "src.config.database",
        "isExtraImport": true,
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.config.database",
        "description": "src.config.database",
        "isExtraImport": true,
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.config.database",
        "description": "src.config.database",
        "isExtraImport": true,
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.config.database",
        "description": "src.config.database",
        "isExtraImport": true,
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.config.database",
        "description": "src.config.database",
        "isExtraImport": true,
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "configure_mappers",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "src.utils.models",
        "description": "src.utils.models",
        "isExtraImport": true,
        "detail": "src.utils.models",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "src.utils.models",
        "description": "src.utils.models",
        "isExtraImport": true,
        "detail": "src.utils.models",
        "documentation": {}
    },
    {
        "label": "hybrid_property",
        "importPath": "sqlalchemy.ext.hybrid",
        "description": "sqlalchemy.ext.hybrid",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.hybrid",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "find_user_by_username",
        "importPath": "src.auth.services",
        "description": "src.auth.services",
        "isExtraImport": true,
        "detail": "src.auth.services",
        "documentation": {}
    },
    {
        "label": "FieldRefreshTokenBody",
        "importPath": "src.endpoints.models",
        "description": "src.endpoints.models",
        "isExtraImport": true,
        "detail": "src.endpoints.models",
        "documentation": {}
    },
    {
        "label": "FieldRefreshTokenResponse",
        "importPath": "src.endpoints.models",
        "description": "src.endpoints.models",
        "isExtraImport": true,
        "detail": "src.endpoints.models",
        "documentation": {}
    },
    {
        "label": "FieldUserCreateBody",
        "importPath": "src.endpoints.models",
        "description": "src.endpoints.models",
        "isExtraImport": true,
        "detail": "src.endpoints.models",
        "documentation": {}
    },
    {
        "label": "FieldUserLoginBody",
        "importPath": "src.endpoints.models",
        "description": "src.endpoints.models",
        "isExtraImport": true,
        "detail": "src.endpoints.models",
        "documentation": {}
    },
    {
        "label": "FieldUserLoginSuccessResponse",
        "importPath": "src.endpoints.models",
        "description": "src.endpoints.models",
        "isExtraImport": true,
        "detail": "src.endpoints.models",
        "documentation": {}
    },
    {
        "label": "UserDetail",
        "importPath": "src.endpoints.models",
        "description": "src.endpoints.models",
        "isExtraImport": true,
        "detail": "src.endpoints.models",
        "documentation": {}
    },
    {
        "label": "VehicleInformation",
        "importPath": "src.endpoints.models",
        "description": "src.endpoints.models",
        "isExtraImport": true,
        "detail": "src.endpoints.models",
        "documentation": {}
    },
    {
        "label": "VehicleCreate",
        "importPath": "src.endpoints.models",
        "description": "src.endpoints.models",
        "isExtraImport": true,
        "detail": "src.endpoints.models",
        "documentation": {}
    },
    {
        "label": "decode_access_token",
        "importPath": "src.utils.auth_utils",
        "description": "src.utils.auth_utils",
        "isExtraImport": true,
        "detail": "src.utils.auth_utils",
        "documentation": {}
    },
    {
        "label": "encode_access_token",
        "importPath": "src.utils.auth_utils",
        "description": "src.utils.auth_utils",
        "isExtraImport": true,
        "detail": "src.utils.auth_utils",
        "documentation": {}
    },
    {
        "label": "encode_refresh_token",
        "importPath": "src.utils.auth_utils",
        "description": "src.utils.auth_utils",
        "isExtraImport": true,
        "detail": "src.utils.auth_utils",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.utils.auth_utils",
        "description": "src.utils.auth_utils",
        "isExtraImport": true,
        "detail": "src.utils.auth_utils",
        "documentation": {}
    },
    {
        "label": "get_new_access_token",
        "importPath": "src.utils.auth_utils",
        "description": "src.utils.auth_utils",
        "isExtraImport": true,
        "detail": "src.utils.auth_utils",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "src.utils.auth_utils",
        "description": "src.utils.auth_utils",
        "isExtraImport": true,
        "detail": "src.utils.auth_utils",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "src.utils.auth_utils",
        "description": "src.utils.auth_utils",
        "isExtraImport": true,
        "detail": "src.utils.auth_utils",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.utils.auth_utils",
        "description": "src.utils.auth_utils",
        "isExtraImport": true,
        "detail": "src.utils.auth_utils",
        "documentation": {}
    },
    {
        "label": "UserVehicle",
        "importPath": "src.vehicles.model",
        "description": "src.vehicles.model",
        "isExtraImport": true,
        "detail": "src.vehicles.model",
        "documentation": {}
    },
    {
        "label": "UserVehicle",
        "importPath": "src.vehicles.model",
        "description": "src.vehicles.model",
        "isExtraImport": true,
        "detail": "src.vehicles.model",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "UTC",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config.setting",
        "description": "src.config.setting",
        "isExtraImport": true,
        "detail": "src.config.setting",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "importPath": "src.utils.auth_bearer",
        "description": "src.utils.auth_bearer",
        "isExtraImport": true,
        "detail": "src.utils.auth_bearer",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "importPath": "src.utils.auth_bearer",
        "description": "src.utils.auth_bearer",
        "isExtraImport": true,
        "detail": "src.utils.auth_bearer",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.auth.router",
        "description": "src.auth.router",
        "isExtraImport": true,
        "detail": "src.auth.router",
        "documentation": {}
    },
    {
        "label": "public_router",
        "importPath": "src.auth.router",
        "description": "src.auth.router",
        "isExtraImport": true,
        "detail": "src.auth.router",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.vehicles.router",
        "description": "src.vehicles.router",
        "isExtraImport": true,
        "detail": "src.vehicles.router",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.2024-08-15_b480e33e2e0a",
        "description": "alembic.versions.2024-08-15_b480e33e2e0a",
        "peekOfCode": "def upgrade() -> None:\n    op.create_table('users',\n        sa.Column('id', sa.Integer(), nullable=False),\n        sa.Column('username', sa.String(), nullable=False),\n        sa.Column('password', sa.String(), nullable=False),\n        sa.Column('first_name', sa.String(length=50), nullable=False),\n        sa.Column('last_name', sa.String(length=50), nullable=False),\n        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.func.now(), nullable=False),\n        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.func.now(), server_onupdate=sa.func.now(), nullable=False),\n        sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),",
        "detail": "alembic.versions.2024-08-15_b480e33e2e0a",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.2024-08-15_b480e33e2e0a",
        "description": "alembic.versions.2024-08-15_b480e33e2e0a",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_index(op.f('ix_users_deleted_at'), table_name='users')\n    op.drop_index(op.f('ix_users_updated_at'), table_name='users')\n    op.drop_index(op.f('ix_users_created_at'), table_name='users')\n    op.drop_index(op.f('ix_users_last_name'), table_name='users')\n    op.drop_index(op.f('ix_users_first_name'), table_name='users')\n    op.drop_table('users')",
        "detail": "alembic.versions.2024-08-15_b480e33e2e0a",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.2024-08-16_9f19dff1fcc3",
        "description": "alembic.versions.2024-08-16_9f19dff1fcc3",
        "peekOfCode": "def upgrade():\n    op.create_table('user_vehicles',\n        sa.Column('id', sa.Integer(), nullable=False),\n        sa.Column('vehicle_name', sa.String(), nullable=False),\n        sa.Column('vehicle_number', sa.String(), nullable=False),\n        sa.Column('description', sa.Text(), nullable=True),\n        sa.Column('user_id', sa.Integer(), nullable=False),\n        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.func.now(), nullable=False),\n        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.func.now(), server_onupdate=sa.func.now(), nullable=False),\n        sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),",
        "detail": "alembic.versions.2024-08-16_9f19dff1fcc3",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.2024-08-16_9f19dff1fcc3",
        "description": "alembic.versions.2024-08-16_9f19dff1fcc3",
        "peekOfCode": "def downgrade():\n    op.drop_table('user_vehicles')",
        "detail": "alembic.versions.2024-08-16_9f19dff1fcc3",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\nDB_USER = os.environ[\"POSTGRES_USER\"]\nDB_PASS = os.environ[\"POSTGRES_PASSWORD\"]\nDB_HOST = os.environ[\"POSTGRES_HOST\"]\nDB_PORT = os.environ[\"POSTGRES_PORT\"]\nDB_NAME = os.environ[\"POSTGRES_DB\"]\nDB_SCHEMA = os.environ.get(\"POSTGRES_SCHEMA\", \"public\")\nconfig.set_main_option(\n    \"sqlalchemy.url\", f\"postgresql://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"\n)",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "DB_USER",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "DB_USER = os.environ[\"POSTGRES_USER\"]\nDB_PASS = os.environ[\"POSTGRES_PASSWORD\"]\nDB_HOST = os.environ[\"POSTGRES_HOST\"]\nDB_PORT = os.environ[\"POSTGRES_PORT\"]\nDB_NAME = os.environ[\"POSTGRES_DB\"]\nDB_SCHEMA = os.environ.get(\"POSTGRES_SCHEMA\", \"public\")\nconfig.set_main_option(\n    \"sqlalchemy.url\", f\"postgresql://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"\n)\n# Interpret the config file for Python logging.",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "DB_PASS",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "DB_PASS = os.environ[\"POSTGRES_PASSWORD\"]\nDB_HOST = os.environ[\"POSTGRES_HOST\"]\nDB_PORT = os.environ[\"POSTGRES_PORT\"]\nDB_NAME = os.environ[\"POSTGRES_DB\"]\nDB_SCHEMA = os.environ.get(\"POSTGRES_SCHEMA\", \"public\")\nconfig.set_main_option(\n    \"sqlalchemy.url\", f\"postgresql://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"\n)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "DB_HOST",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "DB_HOST = os.environ[\"POSTGRES_HOST\"]\nDB_PORT = os.environ[\"POSTGRES_PORT\"]\nDB_NAME = os.environ[\"POSTGRES_DB\"]\nDB_SCHEMA = os.environ.get(\"POSTGRES_SCHEMA\", \"public\")\nconfig.set_main_option(\n    \"sqlalchemy.url\", f\"postgresql://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"\n)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "DB_PORT",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "DB_PORT = os.environ[\"POSTGRES_PORT\"]\nDB_NAME = os.environ[\"POSTGRES_DB\"]\nDB_SCHEMA = os.environ.get(\"POSTGRES_SCHEMA\", \"public\")\nconfig.set_main_option(\n    \"sqlalchemy.url\", f\"postgresql://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"\n)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "DB_NAME",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "DB_NAME = os.environ[\"POSTGRES_DB\"]\nDB_SCHEMA = os.environ.get(\"POSTGRES_SCHEMA\", \"public\")\nconfig.set_main_option(\n    \"sqlalchemy.url\", f\"postgresql://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"\n)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "DB_SCHEMA",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "DB_SCHEMA = os.environ.get(\"POSTGRES_SCHEMA\", \"public\")\nconfig.set_main_option(\n    \"sqlalchemy.url\", f\"postgresql://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"\n)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\ntarget_metadata.reflect(bind=engine)\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "peekOfCode": "class User(BaseModel):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    username  =  Column(String, unique=True, nullable=False)\n    password = Column(String, nullable=False)\n    first_name = Column(String(50), nullable=False, index=True)\n    last_name = Column(String(50), nullable=False, index=True)\n    vehicles  =  relationship(\"UserVehicle\", back_populates='user')\n    @hybrid_property\n    def name(self):",
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "src.auth.router",
        "description": "src.auth.router",
        "peekOfCode": "def login(payload: FieldUserLoginBody,\n    db: Session = Depends(get_db),\n):\n    user = find_user_by_username(db, payload.username)\n    if not verify_password(payload.password, user.password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid Password!!\",\n        )\n    access_token = encode_access_token(payload.username)",
        "detail": "src.auth.router",
        "documentation": {}
    },
    {
        "label": "refresh_token",
        "kind": 2,
        "importPath": "src.auth.router",
        "description": "src.auth.router",
        "peekOfCode": "def refresh_token(\n    request: FieldRefreshTokenBody, db: Session = Depends(get_db)\n):\n    \"\"\"Get new access token from a valid refresh token.\"\"\"\n    new_access_token = get_new_access_token(request.refresh_token)\n    return {\"access_token\": new_access_token}\n@public_router.post('/auth/sign-up')\ndef create_user(payload: FieldUserCreateBody, db: Session  = Depends(get_db)):\n    is_user_exists  =  db.query(exists().where(User.username == payload.username)).scalar()\n    if is_user_exists:",
        "detail": "src.auth.router",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "src.auth.router",
        "description": "src.auth.router",
        "peekOfCode": "def create_user(payload: FieldUserCreateBody, db: Session  = Depends(get_db)):\n    is_user_exists  =  db.query(exists().where(User.username == payload.username)).scalar()\n    if is_user_exists:\n        raise HTTPException(status_code=409, detail=\"User already exists...\")\n    else:\n        hashed_password =  hash_password(payload.password)\n        new_user =  User(\n            username=payload.username,\n            first_name=payload.first_name, \n            last_name=payload.last_name,",
        "detail": "src.auth.router",
        "documentation": {}
    },
    {
        "label": "current_user_detail",
        "kind": 2,
        "importPath": "src.auth.router",
        "description": "src.auth.router",
        "peekOfCode": "def current_user_detail(db:Session =  Depends(get_db), current_user = Depends(get_current_user)):\n    vehicles  = db.query(UserVehicle).filter(UserVehicle.user_id  == current_user.id, UserVehicle.deleted_at.is_(None)).all()\n    vehicles_response =  [ VehicleInformation( \n        id= vehicle.id,\n        vehicle_name  = vehicle.vehicle_name,\n        vechicle_number  = vehicle.vehicle_number, \n        description = vehicle.description, \n        )  for vehicle in vehicles]\n    return UserDetail(\n        id=  current_user.id, ",
        "detail": "src.auth.router",
        "documentation": {}
    },
    {
        "label": "find_user_by_username",
        "kind": 2,
        "importPath": "src.auth.services",
        "description": "src.auth.services",
        "peekOfCode": "def find_user_by_username(db, username):\n    user =  db.query(User).filter(User.username == username).first()\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"User not found\",\n        )\n    return user",
        "detail": "src.auth.services",
        "documentation": {}
    },
    {
        "label": "create_schema_if_not_exists",
        "kind": 2,
        "importPath": "src.config.database",
        "description": "src.config.database",
        "peekOfCode": "def create_schema_if_not_exists(engine, schema_name):\n    inspector = inspect(engine)\n    if schema_name not in inspector.get_schema_names():\n        with engine.connect() as conn:\n            conn.execute(text(f\"CREATE SCHEMA IF NOT EXISTS {schema_name}\"))\n            conn.commit()\ndef wait_for_db(engine, retries=10, delay=10):\n    for i in range(retries):\n        try:\n            create_schema_if_not_exists(engine, pg_schema)",
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "wait_for_db",
        "kind": 2,
        "importPath": "src.config.database",
        "description": "src.config.database",
        "peekOfCode": "def wait_for_db(engine, retries=10, delay=10):\n    for i in range(retries):\n        try:\n            create_schema_if_not_exists(engine, pg_schema)\n            break\n        except OperationalError:\n            if i < retries - 1:\n                print(f\"Database is not ready yet. Retrying in {delay} seconds...\")\n                time.sleep(delay)\n            else:",
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "src.config.database",
        "description": "src.config.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "pg_user",
        "kind": 5,
        "importPath": "src.config.database",
        "description": "src.config.database",
        "peekOfCode": "pg_user = os.environ[\"POSTGRES_USER\"]\npg_pass = os.environ[\"POSTGRES_PASSWORD\"]\npg_host = os.environ[\"POSTGRES_HOST\"]\npg_port = os.environ[\"POSTGRES_PORT\"]\npg_db = os.environ[\"POSTGRES_DB\"]\npg_schema = os.environ.get(\"POSTGRES_SCHEMA\", \"public\") \npg_str = f\"postgresql://{pg_user}:{pg_pass}@{pg_host}:{pg_port}/{pg_db}\"\nengine = create_engine(pg_str)\nif os.environ[\"STAGE\"] == \"LOCAL\":\n    Base = declarative_base(",
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "pg_pass",
        "kind": 5,
        "importPath": "src.config.database",
        "description": "src.config.database",
        "peekOfCode": "pg_pass = os.environ[\"POSTGRES_PASSWORD\"]\npg_host = os.environ[\"POSTGRES_HOST\"]\npg_port = os.environ[\"POSTGRES_PORT\"]\npg_db = os.environ[\"POSTGRES_DB\"]\npg_schema = os.environ.get(\"POSTGRES_SCHEMA\", \"public\") \npg_str = f\"postgresql://{pg_user}:{pg_pass}@{pg_host}:{pg_port}/{pg_db}\"\nengine = create_engine(pg_str)\nif os.environ[\"STAGE\"] == \"LOCAL\":\n    Base = declarative_base(\n        type_annotation_map={Enum: sa.Enum(Enum, inherit_schema=True)}",
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "pg_host",
        "kind": 5,
        "importPath": "src.config.database",
        "description": "src.config.database",
        "peekOfCode": "pg_host = os.environ[\"POSTGRES_HOST\"]\npg_port = os.environ[\"POSTGRES_PORT\"]\npg_db = os.environ[\"POSTGRES_DB\"]\npg_schema = os.environ.get(\"POSTGRES_SCHEMA\", \"public\") \npg_str = f\"postgresql://{pg_user}:{pg_pass}@{pg_host}:{pg_port}/{pg_db}\"\nengine = create_engine(pg_str)\nif os.environ[\"STAGE\"] == \"LOCAL\":\n    Base = declarative_base(\n        type_annotation_map={Enum: sa.Enum(Enum, inherit_schema=True)}\n    )",
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "pg_port",
        "kind": 5,
        "importPath": "src.config.database",
        "description": "src.config.database",
        "peekOfCode": "pg_port = os.environ[\"POSTGRES_PORT\"]\npg_db = os.environ[\"POSTGRES_DB\"]\npg_schema = os.environ.get(\"POSTGRES_SCHEMA\", \"public\") \npg_str = f\"postgresql://{pg_user}:{pg_pass}@{pg_host}:{pg_port}/{pg_db}\"\nengine = create_engine(pg_str)\nif os.environ[\"STAGE\"] == \"LOCAL\":\n    Base = declarative_base(\n        type_annotation_map={Enum: sa.Enum(Enum, inherit_schema=True)}\n    )\nelse:",
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "pg_db",
        "kind": 5,
        "importPath": "src.config.database",
        "description": "src.config.database",
        "peekOfCode": "pg_db = os.environ[\"POSTGRES_DB\"]\npg_schema = os.environ.get(\"POSTGRES_SCHEMA\", \"public\") \npg_str = f\"postgresql://{pg_user}:{pg_pass}@{pg_host}:{pg_port}/{pg_db}\"\nengine = create_engine(pg_str)\nif os.environ[\"STAGE\"] == \"LOCAL\":\n    Base = declarative_base(\n        type_annotation_map={Enum: sa.Enum(Enum, inherit_schema=True)}\n    )\nelse:\n    metadata = MetaData(schema=pg_schema)",
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "pg_schema",
        "kind": 5,
        "importPath": "src.config.database",
        "description": "src.config.database",
        "peekOfCode": "pg_schema = os.environ.get(\"POSTGRES_SCHEMA\", \"public\") \npg_str = f\"postgresql://{pg_user}:{pg_pass}@{pg_host}:{pg_port}/{pg_db}\"\nengine = create_engine(pg_str)\nif os.environ[\"STAGE\"] == \"LOCAL\":\n    Base = declarative_base(\n        type_annotation_map={Enum: sa.Enum(Enum, inherit_schema=True)}\n    )\nelse:\n    metadata = MetaData(schema=pg_schema)\n    Base = declarative_base(",
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "pg_str",
        "kind": 5,
        "importPath": "src.config.database",
        "description": "src.config.database",
        "peekOfCode": "pg_str = f\"postgresql://{pg_user}:{pg_pass}@{pg_host}:{pg_port}/{pg_db}\"\nengine = create_engine(pg_str)\nif os.environ[\"STAGE\"] == \"LOCAL\":\n    Base = declarative_base(\n        type_annotation_map={Enum: sa.Enum(Enum, inherit_schema=True)}\n    )\nelse:\n    metadata = MetaData(schema=pg_schema)\n    Base = declarative_base(\n        metadata=metadata,",
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "src.config.database",
        "description": "src.config.database",
        "peekOfCode": "engine = create_engine(pg_str)\nif os.environ[\"STAGE\"] == \"LOCAL\":\n    Base = declarative_base(\n        type_annotation_map={Enum: sa.Enum(Enum, inherit_schema=True)}\n    )\nelse:\n    metadata = MetaData(schema=pg_schema)\n    Base = declarative_base(\n        metadata=metadata,\n        type_annotation_map={Enum: sa.Enum(Enum, inherit_schema=True)},",
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "src.config.database",
        "description": "src.config.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "src.config.database",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "src.config.setting",
        "description": "src.config.setting",
        "peekOfCode": "class Settings(BaseSettings):\n    \"\"\"Base settings.\"\"\"\n    DB_PORT: int = os.getenv(\"POSTGRES_PORT\")\n    DB_HOST: str = os.getenv(\"POSTGRES_HOST\")\n    DB_NAME: str = os.getenv(\"POSTGRES_DB\")\n    DB_USER: str = os.getenv(\"POSTGRES_USER\")\n    DB_PASS: str = os.getenv(\"POSTGRES_PASSWORD\")\n    JWT_ALGORITHM: str = os.getenv(\"JWT_ALGORITHM\")\n    JWT_SECRET: str = os.getenv(\"JWT_SECRET\")\n    ACCESS_TOKEN_EXPIRES_AT: int = os.getenv(\"ACCESS_TOKEN_EXPIRES_AT\")",
        "detail": "src.config.setting",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "src.config.setting",
        "description": "src.config.setting",
        "peekOfCode": "settings = Settings()",
        "detail": "src.config.setting",
        "documentation": {}
    },
    {
        "label": "FieldUserLoginBody",
        "kind": 6,
        "importPath": "src.endpoints.models",
        "description": "src.endpoints.models",
        "peekOfCode": "class FieldUserLoginBody(BaseModel):\n    username: str = Field(..., example='username', title='username')\n    password: str = Field(..., example='password', title='password')\nclass FieldUserLoginSuccessResponse(BaseModel):\n    access_token: Optional[str] = Field(\n        None,\n        example='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',\n        title='access_token',\n    )\n    refresh_token: Optional[str] = Field(",
        "detail": "src.endpoints.models",
        "documentation": {}
    },
    {
        "label": "FieldUserLoginSuccessResponse",
        "kind": 6,
        "importPath": "src.endpoints.models",
        "description": "src.endpoints.models",
        "peekOfCode": "class FieldUserLoginSuccessResponse(BaseModel):\n    access_token: Optional[str] = Field(\n        None,\n        example='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',\n        title='access_token',\n    )\n    refresh_token: Optional[str] = Field(\n        None,\n        example='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',\n        title='refresh_token',",
        "detail": "src.endpoints.models",
        "documentation": {}
    },
    {
        "label": "FieldRefreshTokenBody",
        "kind": 6,
        "importPath": "src.endpoints.models",
        "description": "src.endpoints.models",
        "peekOfCode": "class FieldRefreshTokenBody(BaseModel):\n    refresh_token: str = Field(\n        ...,\n        example='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',\n        title='refresh_token',\n    )\nclass FieldRefreshTokenResponse(BaseModel):\n    access_token: Optional[str] = Field(\n        None,\n        example='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',",
        "detail": "src.endpoints.models",
        "documentation": {}
    },
    {
        "label": "FieldRefreshTokenResponse",
        "kind": 6,
        "importPath": "src.endpoints.models",
        "description": "src.endpoints.models",
        "peekOfCode": "class FieldRefreshTokenResponse(BaseModel):\n    access_token: Optional[str] = Field(\n        None,\n        example='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',\n        title='access_token',\n    )\nclass FieldUserCreateBody(BaseModel):\n    username: str = Field(..., example='user123', title='username')\n    first_name: Optional[str] = Field(None, example='first_name', title='first_name')\n    last_name: Optional[str] = Field(None, example='last_name', title='last_name')",
        "detail": "src.endpoints.models",
        "documentation": {}
    },
    {
        "label": "FieldUserCreateBody",
        "kind": 6,
        "importPath": "src.endpoints.models",
        "description": "src.endpoints.models",
        "peekOfCode": "class FieldUserCreateBody(BaseModel):\n    username: str = Field(..., example='user123', title='username')\n    first_name: Optional[str] = Field(None, example='first_name', title='first_name')\n    last_name: Optional[str] = Field(None, example='last_name', title='last_name')\n    password: str = Field(..., example='userpass', title='password')\nclass VehicleCreate(BaseModel):\n    vehicle_name: str \n    vehicle_number: str\n    description: Optional[str]  = None\nclass VehicleInformation(BaseModel):",
        "detail": "src.endpoints.models",
        "documentation": {}
    },
    {
        "label": "VehicleCreate",
        "kind": 6,
        "importPath": "src.endpoints.models",
        "description": "src.endpoints.models",
        "peekOfCode": "class VehicleCreate(BaseModel):\n    vehicle_name: str \n    vehicle_number: str\n    description: Optional[str]  = None\nclass VehicleInformation(BaseModel):\n    id: Optional[int] = None\n    vehicle_name: str = None\n    vehicle_number: str =  None\n    description: Optional[str]  = None\nclass UserDetail(BaseModel):",
        "detail": "src.endpoints.models",
        "documentation": {}
    },
    {
        "label": "VehicleInformation",
        "kind": 6,
        "importPath": "src.endpoints.models",
        "description": "src.endpoints.models",
        "peekOfCode": "class VehicleInformation(BaseModel):\n    id: Optional[int] = None\n    vehicle_name: str = None\n    vehicle_number: str =  None\n    description: Optional[str]  = None\nclass UserDetail(BaseModel):\n    id: Optional[int] = None\n    username: str \n    first_name: str\n    last_name: str",
        "detail": "src.endpoints.models",
        "documentation": {}
    },
    {
        "label": "UserDetail",
        "kind": 6,
        "importPath": "src.endpoints.models",
        "description": "src.endpoints.models",
        "peekOfCode": "class UserDetail(BaseModel):\n    id: Optional[int] = None\n    username: str \n    first_name: str\n    last_name: str\n    vehicles: Optional[List[VehicleInformation]] =  None",
        "detail": "src.endpoints.models",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "kind": 6,
        "importPath": "src.utils.auth_bearer",
        "description": "src.utils.auth_bearer",
        "peekOfCode": "class JWTBearer(HTTPBearer):\n    \"\"\"JWT Token authenticater.\"\"\"\n    def __init__(self, auto_error: bool = True):\n        super(JWTBearer, self).__init__(auto_error=auto_error)\n    async def __call__(self, request: Request, db: Session = Depends(get_db)):\n        from src.utils.auth_utils import verify_jwt\n        credentials: HTTPAuthorizationCredentials = await super(\n            JWTBearer, self\n        ).__call__(request)\n        if credentials:",
        "detail": "src.utils.auth_bearer",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "src.utils.auth_utils",
        "description": "src.utils.auth_utils",
        "peekOfCode": "def hash_password(password: str):\n    \"\"\"Transfrom and return plain text password into hashed password.\"\"\"\n    hashed_pwd = bcrypt.hashpw(password.encode(\"utf-8\"), bcrypt.gensalt())\n    return hashed_pwd.decode(\"utf-8\")\ndef verify_password(password: str, hashed_password: str):\n    \"\"\"Check if provided password matches with saved password hash.\"\"\"\n    return bcrypt.checkpw(password.encode(\"utf-8\"), hashed_password.encode(\"utf-8\"))\ndef encode_access_token(\n    username: str,\n    expires_delta: timedelta | None = settings.ACCESS_TOKEN_EXPIRES_AT,",
        "detail": "src.utils.auth_utils",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "src.utils.auth_utils",
        "description": "src.utils.auth_utils",
        "peekOfCode": "def verify_password(password: str, hashed_password: str):\n    \"\"\"Check if provided password matches with saved password hash.\"\"\"\n    return bcrypt.checkpw(password.encode(\"utf-8\"), hashed_password.encode(\"utf-8\"))\ndef encode_access_token(\n    username: str,\n    expires_delta: timedelta | None = settings.ACCESS_TOKEN_EXPIRES_AT,\n):\n    \"\"\"Create access token from provided data.\"\"\"\n    payload = {\n        \"exp\": datetime.now(UTC) + timedelta(minutes=expires_delta),",
        "detail": "src.utils.auth_utils",
        "documentation": {}
    },
    {
        "label": "encode_access_token",
        "kind": 2,
        "importPath": "src.utils.auth_utils",
        "description": "src.utils.auth_utils",
        "peekOfCode": "def encode_access_token(\n    username: str,\n    expires_delta: timedelta | None = settings.ACCESS_TOKEN_EXPIRES_AT,\n):\n    \"\"\"Create access token from provided data.\"\"\"\n    payload = {\n        \"exp\": datetime.now(UTC) + timedelta(minutes=expires_delta),\n        \"iat\": datetime.now(UTC),\n        \"scope\": \"access_token\",\n        \"sub\": username,",
        "detail": "src.utils.auth_utils",
        "documentation": {}
    },
    {
        "label": "decode_access_token",
        "kind": 2,
        "importPath": "src.utils.auth_utils",
        "description": "src.utils.auth_utils",
        "peekOfCode": "def decode_access_token(token: str):\n    \"\"\"Decode access token.\"\"\"\n    try:\n        payload = jwt.decode(token, settings.JWT_SECRET, [settings.JWT_ALGORITHM])\n        if payload[\"scope\"] == \"access_token\":\n            return payload\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Scope for the token invalid\",\n        )",
        "detail": "src.utils.auth_utils",
        "documentation": {}
    },
    {
        "label": "encode_refresh_token",
        "kind": 2,
        "importPath": "src.utils.auth_utils",
        "description": "src.utils.auth_utils",
        "peekOfCode": "def encode_refresh_token(\n    username: str,\n    expires_delta: timedelta | None = settings.REFRESH_TOKEN_EXPIRES_AT,\n):\n    \"\"\"Create refresh token from access token.\"\"\"\n    payload = {\n        \"exp\": datetime.now(UTC) + timedelta(minutes=expires_delta),\n        \"iat\": datetime.now(UTC),\n        \"scope\": \"refresh_token\",\n        \"sub\": username,",
        "detail": "src.utils.auth_utils",
        "documentation": {}
    },
    {
        "label": "get_new_access_token",
        "kind": 2,
        "importPath": "src.utils.auth_utils",
        "description": "src.utils.auth_utils",
        "peekOfCode": "def get_new_access_token(refresh_token: str):\n    \"\"\"Issue new access token from valid refresh token.\"\"\"\n    try:\n        payload = jwt.decode(\n            refresh_token, settings.JWT_SECRET, [settings.JWT_ALGORITHM]\n        )\n        if payload[\"scope\"] == \"refresh_token\":\n            user_data = payload[\"sub\"]\n            new_token = encode_access_token(user_data)\n            return new_token",
        "detail": "src.utils.auth_utils",
        "documentation": {}
    },
    {
        "label": "verify_jwt",
        "kind": 2,
        "importPath": "src.utils.auth_utils",
        "description": "src.utils.auth_utils",
        "peekOfCode": "def verify_jwt(token: str, db: Session) -> bool:\n    is_token_valid: bool = False\n    try:\n        payload = decode_access_token(token).get(\"sub\")\n    except:\n        payload = None\n    if payload:\n        is_token_valid = True\n    return is_token_valid\ndef get_current_user(",
        "detail": "src.utils.auth_utils",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "src.utils.auth_utils",
        "description": "src.utils.auth_utils",
        "peekOfCode": "def get_current_user(\n    token: Optional[HTTPAuthorizationCredentials] = Depends(JWTBearer()),\n    db: Session  =  Depends(get_db)\n) -> User:\n    payload_data = decode_access_token(token)\n    username =  payload_data.get('sub')\n    user  = db.query(User).filter(User.username== username).first()\n    if user:\n        return user\n    else :",
        "detail": "src.utils.auth_utils",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": "src.utils.models",
        "description": "src.utils.models",
        "peekOfCode": "class BaseModel(Base):\n    __abstract__ = True\n    created_at = Column(DateTime(timezone=True), default=func.now(), nullable=False, index=True)\n    updated_at = Column(DateTime(timezone=True), default=func.now(), onupdate=func.now(), nullable=False, index=True)\n    deleted_at = Column(DateTime(timezone=True), default=None, nullable=True, index=True)",
        "detail": "src.utils.models",
        "documentation": {}
    },
    {
        "label": "UserVehicle",
        "kind": 6,
        "importPath": "src.vehicles.model",
        "description": "src.vehicles.model",
        "peekOfCode": "class UserVehicle(BaseModel):\n    __tablename__ =  'user_vehicles'\n    id = Column(Integer, primary_key=True)\n    vehicle_name = Column(String, nullable=False)\n    vehicle_number = Column(String, nullable=False)\n    description = Column(Text, nullable=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    user = relationship(\"User\", back_populates=\"vehicles\")",
        "detail": "src.vehicles.model",
        "documentation": {}
    },
    {
        "label": "create_vehicle",
        "kind": 2,
        "importPath": "src.vehicles.router",
        "description": "src.vehicles.router",
        "peekOfCode": "def create_vehicle(vehicle: VehicleCreate, db: Session = Depends(get_db), user : User  = Depends(get_current_user)):\n    db_vehicle = UserVehicle(\n        vehicle_name=vehicle.vehicle_name,\n        vehicle_number=vehicle.vehicle_number,\n        description=vehicle.description,\n        user_id= user.id\n    )\n    db.add(db_vehicle)\n    db.commit()\n    db.refresh(db_vehicle)",
        "detail": "src.vehicles.router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.vehicles.router",
        "description": "src.vehicles.router",
        "peekOfCode": "router = APIRouter(tags=['Vehicles'])\n@router.post(\"/vehicles\")\ndef create_vehicle(vehicle: VehicleCreate, db: Session = Depends(get_db), user : User  = Depends(get_current_user)):\n    db_vehicle = UserVehicle(\n        vehicle_name=vehicle.vehicle_name,\n        vehicle_number=vehicle.vehicle_number,\n        description=vehicle.description,\n        user_id= user.id\n    )\n    db.add(db_vehicle)",
        "detail": "src.vehicles.router",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "app = FastAPI(\n    title='OCCP Backend DOCS',\n    version='1.0',\n    servers=[{'url': 'http://localhost:8000'}]\n)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],    # 信頼するオリジンのリスト\n    allow_credentials=True,   # クッキーをサポートするかどうか\n    allow_methods=[\"*\"],      # 全てのHTTPメソッドを許可する",
        "detail": "src.main",
        "documentation": {}
    }
]